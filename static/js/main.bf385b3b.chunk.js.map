{"version":3,"sources":["components/GetStats.module.css","components/Footer.module.css","components/covid19.png","components/GetStats.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GetStats","props","state","date","positive","hospitalized","death","deathIncrease","hospitalizedIncrease","this","getData","Axios","get","res","setState","data","hospitalizedCurrently","className","styles","virus","src","require","alt","Component","Footer","isModalOpen","toggleModal","bind","Fragment","stylestwo","bottom","button","color","outline","onClick","class","aria-hidden","isOpen","toggle","onSubmit","handleLogin","htmlFor","type","id","name","innerRef","input","email","value","App","dark","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,IAAM,sBAAsB,MAAQ,wBAAwB,MAAQ,wBAAwB,SAAW,2BAA2B,aAAe,iC,mBCAnKD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,OAAS,yB,iGCD3DD,EAAOC,QAAU,IAA0B,qC,+LCoF5BC,E,kDA/Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,EACNC,SAAU,EACVC,aAAc,EACdC,MAAO,EACPC,cAAe,EACfC,qBAAsB,GARP,E,gEAajBC,KAAKC,Y,gKAIaC,IAAMC,IACtB,2D,OADIC,E,OAGNJ,KAAKK,SAAS,CACZX,KAAMU,EAAIE,KAAKZ,KACfC,SAAUS,EAAIE,KAAKX,SACnBC,aAAcQ,EAAIE,KAAKC,sBACvBV,MAAOO,EAAIE,KAAKT,MAChBC,cAAeM,EAAIE,KAAKR,cACxBC,qBAAsBK,EAAIE,KAAKP,uB,qIAKjC,OACE,yBAAKS,UAAU,mBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OAChB,yBAAKA,UAAU,OACd,6DACE,yBAAKA,UAAWC,IAAOC,MAAOC,IAAKC,EAAQ,IAAkBC,IAAI,WAEnE,iEAIF,yBAAKL,UAAU,aACf,yBAAKA,UAAU,OACb,yBAAKA,UAAWC,IAAOZ,OACvB,yBAAKW,UAAU,OACb,oGAKA,4BAAKR,KAAKP,MAAMI,SAGlB,yBAAKW,UAAYC,IAAOd,UACxB,yBAAKa,UAAU,OACb,qGAIA,4BAAKR,KAAKP,MAAME,YAGlB,yBAAKa,UAAWC,IAAOb,cACvB,yBAAKY,UAAU,OACb,gGAGA,4BAAKR,KAAKP,MAAMG,uB,GAtELkB,a,yBCkERC,E,kDAhEX,WAAYvB,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAO,CACRuB,aAAa,GAGjB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBANL,E,0DAWlBlB,KAAKK,SAAS,CACVW,aAAchB,KAAKP,MAAMuB,gB,+BAIpB,IAAD,OACJ,OACA,kBAAC,IAAMG,SAAP,KACA,yBAAKX,UAAWY,IAAUC,QAC1B,yBAAKb,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACf,oFAEA,yBAAKA,UAAU,OACf,yBAAKA,UAAU,OACf,yBAAKA,UAAWY,IAAUE,QACtB,kBAAC,IAAD,CAAQC,MAAM,OAAOC,SAAO,EAACC,QAASzB,KAAKiB,aAC3C,uBAAGS,MAAM,sBAAsBC,cAAY,SAD3C,WAGJ,4EAEA,kBAAC,IAAD,CAAOC,OAAQ5B,KAAKP,MAAMuB,YAAaa,OAAQ7B,KAAKiB,aAChD,kBAAC,IAAD,CAAaY,OAAQ7B,KAAKiB,aAA1B,sCACA,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAMa,SAAU9B,KAAK+B,aACb,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,QAAQ,QAAf,QACA,kBAAC,IAAD,CAAOC,KAAK,OAAOC,GAAG,OAAOC,KAAK,OAC9BC,SAAU,SAAAC,GAAK,OAAI,EAAKF,KAAOE,MAEvC,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOL,QAAQ,SAAf,iBACA,kBAAC,IAAD,CAAOC,KAAK,QAAQC,GAAG,QAAQC,KAAK,QAChCC,SAAU,SAAAC,GAAK,OAAI,EAAKC,MAAQD,MAExC,kBAAC,IAAD,CAAQJ,KAAK,SAASM,MAAM,SAAShB,MAAM,WAA3C,2B,GAhDPT,aCmBN0B,E,uKAdP,OACI,yBAAKhC,UAAU,OACX,kBAAC,IAAD,CAAQiC,MAAI,EAAClB,MAAM,WACnB,yBAAKf,UAAU,aACX,kBAAC,IAAD,CAAakC,KAAK,KAAlB,uCAGJ,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAVE5B,aCIE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bf385b3b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"red\":\"GetStats_red__3-Qd9\",\"virus\":\"GetStats_virus__2hOZH\",\"death\":\"GetStats_death__H59ac\",\"positive\":\"GetStats_positive__1_Kkr\",\"hospitalized\":\"GetStats_hospitalized__29cyU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bottom\":\"Footer_bottom__2SdFn\",\"button\":\"Footer_button__3BmZc\"};","module.exports = __webpack_public_path__ + \"static/media/covid19.6096fdd4.png\";","import React, { Component } from \"react\";\r\nimport Axios from \"axios\";\r\nimport styles from \"./GetStats.module.css\";\r\n\r\nclass GetStats extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      date: 0,\r\n      positive: 0,\r\n      hospitalized: 0,\r\n      death: 0,\r\n      deathIncrease: 0,\r\n      hospitalizedIncrease: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n  }\r\n\r\n  async getData() {\r\n    const res = await Axios.get(\r\n      \"https://covidtracking.com/api/v1/states/ca/current.json\"\r\n    );\r\n    this.setState({\r\n      date: res.data.date,\r\n      positive: res.data.positive,\r\n      hospitalized: res.data.hospitalizedCurrently,\r\n      death: res.data.death,\r\n      deathIncrease: res.data.deathIncrease,\r\n      hospitalizedIncrease: res.data.hospitalizedIncrease,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <div className=\"jumbotron\">\r\n          <div className=\"row\">\r\n         <div className=\"col\">\r\n          <h1>California Corona Daily Update\r\n            <img className={styles.virus} src={require('./covid19.png')} alt=\"virus\" />\r\n          </h1>\r\n          <h2>Today's California Covid Stats</h2>\r\n          </div>\r\n        </div>\r\n        </div>\r\n        <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className={styles.death}>\r\n          <div className=\"col\">\r\n            <h3>\r\n              Total number of people who have died as a result of COVID-19 so\r\n              far:\r\n            </h3>\r\n          \r\n            <h2>{this.state.death}</h2>\r\n          </div>\r\n          </div>\r\n          <div className= {styles.positive}>\r\n          <div className=\"col\">\r\n            <h3>\r\n              Total # of Californians who have tested positive for COVID-19 so\r\n              far:\r\n            </h3>\r\n            <h2>{this.state.positive}</h2>\r\n            </div>\r\n          </div>\r\n          <div className={styles.hospitalized}>\r\n          <div className=\"col\">\r\n            <h3>\r\n              Number of Californians in the hospital for COVID-19 on this day:\r\n            </h3>\r\n            <h2>{this.state.hospitalized}</h2>\r\n          </div>\r\n          </div>\r\n          </div>\r\n        </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GetStats;\r\n","import React, {Component} from \"react\";\r\nimport stylestwo from \"./Footer.module.css\";\r\nimport {Button, Modal, ModalHeader, ModalBody, Collapse, Form, FormGroup, Input, Label} from 'reactstrap';\r\n\r\n\r\nclass Footer extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state= {\r\n            isModalOpen: false\r\n        };\r\n\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n\r\n    }\r\n\r\ntoggleModal(){\r\n    this.setState({\r\n        isModalOpen: !this.state.isModalOpen\r\n    });\r\n}\r\n\r\n    render(){\r\n        return(\r\n        <React.Fragment>\r\n        <div className={stylestwo.bottom}>\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                <p>Data fetched from https://covidtracking.com/data/api</p>\r\n                </div>\r\n                <div className=\"row\">\r\n                <div className=\"col\">\r\n                <div className={stylestwo.button}>\r\n                    <Button color=\"link\" outline onClick={this.toggleModal}>\r\n                    <i class=\"fa fa-sign-in fa-lg\" aria-hidden=\"true\"></i>Sign Up\r\n                    </Button>\r\n                <p> Get updates delivered directly to your inbox</p>\r\n\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                    <ModalHeader toggle={this.toggleModal}>Sign Up for Daily CA Covid Updates</ModalHeader>\r\n                    <ModalBody>\r\n                    <Form onSubmit={this.handleLogin}>\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"name\">Name</Label>\r\n                                <Input type=\"text\" id=\"name\" name=\"name\"\r\n                                    innerRef={input => this.name = input} />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"email\">Email Address</Label>\r\n                                <Input type=\"email\" id=\"email\" name=\"email\"\r\n                                    innerRef={input => this.email = input} />\r\n                            </FormGroup>\r\n                            <Button type=\"submit\" value=\"submit\" color=\"primary\">Subscribe</Button>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                </div>\r\n                </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n          \r\n            </div>\r\n        </React.Fragment>\r\n        );\r\n    }\r\n\r\n}\r\nexport default Footer;","import React, { Component } from 'react';\nimport { Navbar, NavbarBrand } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport GetStats from './components/GetStats';\nimport Footer from './components/Footer';\n\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Navbar dark color=\"primary\">\n                <div className=\"container\">\n                    <NavbarBrand href=\"/\">California Coronavirus Update App</NavbarBrand>\n                </div>\n                </Navbar>\n                <GetStats/>\n                <Footer />\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}